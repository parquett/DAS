@using Weblib.Models
@using SecurityCRMLib.Tools.AdminArea
@{
    var User = Lib.Tools.Security.Authentication.GetCurrentUser();
    Random rnd = new Random();
}
<!-- Left side column. contains the logo and sidebar -->
<aside class="main-sidebar sidebar-flex">
    <!-- sidebar: style can be found in sidebar.less -->
    <div style="display:flex;flex-direction:column;justify-content:space-between">


        <section class="sidebar">
            <!-- Sidebar user panel -->
            <div class="user-panel">
                <div class="pull-left image">
                    <img src="@(User.Image!=null && !string.IsNullOrEmpty(User.Image.Thumbnail)?User.Image.Thumbnail:Lib.Tools.Utils.URLHelper.GetUrl(@"Images\placeholders\UserPlaceHolder.png"))" class="img-circle" alt="User Image">
                </div>
                <div class="pull-left info">
                    <p>@(User.Person.FirstName + " " + User.Person.LastName)</p>
                    <a href="#"><i class="fa fa-circle text-success"></i> Online</a>
                </div>
            </div>
            <!-- search form -->
            <form action="#" method="get" class="sidebar-form">
                <div class="input-group">
                    <input type="text" name="q" class="form-control" placeholder=@SecurityCRM.Helpers.T.Str("Search", "FrontEnd", "Search")>
                    <span class="input-group-btn">
                        <button type="submit" name="search" id="search-btn" class="btn btn-flat"><i class="fa fa-search"></i></button>
                    </span>
                </div>
            </form>
            <!-- /.search form -->
            <!-- sidebar menu: : style can be found in sidebar.less -->
            <ul class="sidebar-menu">
                <li class="header">@SecurityCRM.Helpers.T.Str("Navigation", "FrontEnd", "Navigation")</li>
                <li class="@(ViewData["BOType"]==null?"active ":"")treeview">
                    <a href="@Lib.Tools.Utils.URLHelper.GetUrl("SystemManagement/DashBoard/")">
                        <i class="fa fa-dashboard"></i> <span>@SecurityCRM.Helpers.T.Str("Dashboard", "FrontEnd", "Dashboard")</span> <i class="fa pull-right"></i>
                    </a>
                </li>
                @{
                    var TypeList = (Dictionary<Lib.Tools.AdminArea.AdminAreaGroupenum, List<Lib.BusinessObjects.BusinessObject>>)ViewData["TypeList"];
                }
                @{
                    var CurrentType = (Type)ViewData["BOType"];
                }
                @{
                    var ParentType = (Type)ViewData["BOLinkType"];
                }
                @foreach (AdminAreaGroup group in AdminAreaGroup.Groups.Values)
                {
                    if (TypeList.ContainsKey(group.Group) && group.Parent == null)
                    {
                        var activeTab = false;
                        activeTab = (CurrentType != null && TypeList[group.Group].Any(bo => bo.Type == CurrentType));
                        if (!activeTab && AdminAreaGroup.Groups.Values.Any(g => g.Parent == group.Parent)) // not top group
                        {
                            var subGrups = AdminAreaGroup.Groups.Values.Where(g => g.Parent != null && g.Parent.Group == group.Group);
                            foreach (AdminAreaGroup subgroup in subGrups)
                            {
                                if ((CurrentType != null && TypeList[subgroup.Group].Any(bo => bo.Type == CurrentType)))
                                {
                                    activeTab = true;
                                    break;
                                }
                            }
                        }
                        if (!activeTab)
                        {
                            activeTab = (ParentType != null && TypeList[group.Group].Any(bo => bo.Type == ParentType));
                        }
                        if (!activeTab && AdminAreaGroup.Groups.Values.Any(g => g.Parent == group.Parent)) // not top group
                        {
                            var subGrups = AdminAreaGroup.Groups.Values.Where(g => g.Parent != null && g.Parent.Group == group.Group);
                            foreach (AdminAreaGroup subgroup in subGrups)
                            {
                                if ((ParentType != null && TypeList[subgroup.Group].Any(bo => bo.Type == ParentType)))
                                {
                                    activeTab = true;
                                    break;
                                }
                            }
                        }
                        <li class="@(activeTab ? "active " : "")treeview">
                            <a href="#">
                                <i class="fa fa-@(group.Icon)"></i>
                                <span>@SecurityCRM.Helpers.T.Str(group.Name, "FrontEnd")</span>
                                <i class="fa fa-angle-left pull-right"></i>
                            </a>
                            <ul class="treeview-menu">
                                @foreach (var bo in TypeList[group.Group])
                                {
                                    <li @if ((CurrentType != null && bo.Type == CurrentType) || (ParentType != null && bo.Type == ParentType)) {
                            @: class="active"
                            }>
                                        <a href="@Lib.Tools.Utils.URLHelper.GetUrl("SystemManagement\\Edit\\")@(bo.Type.Name)\@(System.Net.WebUtility.UrlEncode(bo.Type.Namespace))">
                                            <i class="fa fa-@(bo.Properties.Icon)"></i>@(bo.Properties != null && !string.IsNullOrEmpty(bo.Properties.DisplayName) ? bo.Properties.DisplayName : bo.Type.Name)
                                        </a>
                                    </li>
                                }
                                @if (AdminAreaGroup.Groups.Values.Any(g => g.Parent == group.Parent))
                                {
                                    var subGrups = AdminAreaGroup.Groups.Values.Where(g => g.Parent != null && g.Parent.Group == group.Group);
                                    foreach (AdminAreaGroup subgroup in subGrups)
                                    {
                                        if (TypeList.ContainsKey(subgroup.Group))
                                        {
                                            var subactiveTab = false;
                                            subactiveTab = (CurrentType != null && TypeList[subgroup.Group].Any(bo => bo.Type == CurrentType));
                                            if (!subactiveTab)
                                            {
                                                subactiveTab = (ParentType != null && TypeList[subgroup.Group].Any(bo => bo.Type == ParentType));
                                            }
                                            <li class="@(subactiveTab ? "active " : "")treeview">
                                                <a href="#">
                                                    <i class="fa fa-@(subgroup.Icon)"></i>
                                                    <span>@(subgroup.Name)</span>
                                                    <i class="fa fa-angle-left pull-right"></i>
                                                </a>
                                                <ul class="treeview-menu">
                                                    @foreach (var bo in TypeList[subgroup.Group])
                                                    {
                                                        <li @if ((CurrentType != null && bo.Type == CurrentType) || (ParentType != null && bo.Type == ParentType)) {
                                    @: class="active"
                                    }>
                                                            <a href="@Lib.Tools.Utils.URLHelper.GetUrl("SystemManagement\\Edit\\")@(bo.Type.Name)\@(System.Net.WebUtility.UrlEncode(bo.Type.Namespace))">
                                                                <i class="fa fa-@(bo.Properties.Icon)"></i>@(bo.Properties != null && !string.IsNullOrEmpty(bo.Properties.DisplayName) ? bo.Properties.DisplayName : bo.Type.Name)
                                                            </a>
                                                        </li>
                                                    }
                                                </ul>
                                            </li>
                                        }
                                    }
                                }
                            </ul>
                        </li>
                    }
                }
                <li class="treeview">
                    <a href="#"><i class="fa fa-book"></i> <span>@SecurityCRM.Helpers.T.Str("Documentation", "FrontEnd", "Documentation")</span></a>
                    <ul class="treeview-menu">
                        @*<li>
                        <a target="_blank" href="@Lib.Tools.Utils.URLHelper.GetUrl("Documents\\Manual_Sectia.pdf")">
                        <i class="fa fa-circle-o"></i><span>Ghidul Utilizatior</span>
                        </a>
                        </li>
                        <li>
                        <a target="_blank" href="@Lib.Tools.Utils.URLHelper.GetUrl("Documents\\Manual_Registratura.pdf")">
                        <i class="fa fa-circle-o"></i><span>Ghidul Registratura</span>
                        </a>
                        </li>
                        <li>
                        <a target="_blank" href="@Lib.Tools.Utils.URLHelper.GetUrl("Documents\\Manual_Control_Panel.pdf")">
                        <i class="fa fa-circle-o"></i><span>Ghidul Administrator</span>
                        </a>*@
                    @*</ul>
                </li>
            </ul>*@
        </section>
    </div>
</aside>

<style>
    .amap_button {
        background: linear-gradient(0deg, rgba(234,54,179,1) 0%, rgba(234,51,35,1) 100%);
        color: white !important;
        border-radius: 11% !important;
        /* width: 90px; */
        border: 1px solid transparent;
        align-items: center;
        display: flex;
        justify-content: center;
        height: 45px;
        flex-direction: column;
    }


        .amap_button:hover {
            background: linear-gradient(0deg,rgba(234,51,35,1) 0%, rgba(234,54,179,1) 100%);
            box-shadow: 0px 5px 10px grey;
            color: #fff;
            transform: translateY(-7px);
        }

        .amap_buttons_section{
        display: flex;
        justify-content: center;
        gap: 20px;
        }

        .amap_buttons_section_collapsed{
        display: block;
        justify-content: center;
        width: 50px;
        }
</style>

<!-- /.sidebar -->